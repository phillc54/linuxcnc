'\" t
.\"     Title: rtapi_shmem
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 05/27/2025
.\"    Manual: LinuxCNC Documentation
.\"    Source: LinuxCNC
.\"  Language: English
.\"
.TH "RTAPI_SHMEM" "3" "05/27/2025" "LinuxCNC" "LinuxCNC Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
rtapi_shmem, rtapi_shmem_new, rtapi_shmem_delete, rtapi_shmem_getptr \- Functions for managing shared memory blocks
.SH "SYNTAX"
.sp
.if n \{\
.RS 4
.\}
.nf
int rtapi_shmem_new(int _key_, int _module_id_, unsigned long int _size_);
int rtapi_shmem_delete(int _shmem_id_, int _module_id_);
int rtapi_shmem_getptr(int _shmem_id_, void ** _ptr_);
.fi
.if n \{\
.RE
.\}
.SH "ARGUMENTS"
.PP
key
.RS 4
Identifies the memory block\&. Key must be nonzero\&. All modules wishing to use the same memory must use the same key\&.
.RE
.PP
module_id
.RS 4
Module identifier returned by a prior call to
\fBrtapi_init\fR\&.
.RE
.PP
size
.RS 4
The desired size of the shared memory block, in bytes
.RE
.PP
ptr
.RS 4
The pointer to the shared memory block\&. Note that the block may be mapped at a different address for different modules\&.
.RE
.SH "DESCRIPTION"
.sp
\fBrtapi_shmem_new\fR allocates a block of shared memory\&. \fIkey\fR identifies the memory block, and must be non\-zero\&. All modules wishing to access the same memory must use the same key\&. \fImodule_id\fR is the ID of the module that is making the call (see rtapi_init)\&. The block will be at least \fIsize\fR bytes, and may be rounded up\&. Allocating many small blocks may be very wasteful\&. When a particular block is allocated for the first time, the contents are zeroed\&. Subsequent allocations of the same block by other modules or processes will not touch the contents of the block\&. Applications can use those bytes to see if they need to initialize the block, or if another module already did so\&. On success, it returns a positive integer ID, which is used for all subsequent calls dealing with the block\&. On failure it returns a negative error code\&.
.sp
\fBrtapi_shmem_delete\fR frees the shared memory block associated with \fIshmem_id\fR\&. \fImodule_id\fR is the ID of the calling module\&. Returns a status code\&.
.sp
\fBrtapi_shmem_getptr\fR sets \fI*ptr\fR to point to shared memory block associated with \fIshmem_id\fR\&.
.SH "REALTIME CONSIDERATIONS"
.sp
\fBrtapi_shmem_getptr\fR may be called from non\-realtime code, init/cleanup code, or realtime tasks\&.
.sp
\fBrtapi_shmem_new\fR and \fBrtapi_shmem_dete\fR may not be called from realtime tasks\&.
