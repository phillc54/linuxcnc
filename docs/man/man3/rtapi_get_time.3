'\" t
.\"     Title: rtapi_get_time
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 05/27/2025
.\"    Manual: LinuxCNC Documentation
.\"    Source: LinuxCNC
.\"  Language: English
.\"
.TH "RTAPI_GET_TIME" "3" "05/27/2025" "LinuxCNC" "LinuxCNC Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
rtapi_get_time, rtapi_get_clocks \- get the current time
.SH "SYNTAX"
.sp
.if n \{\
.RS 4
.\}
.nf
long long rtapi_get_time();
long long rtapi_get_clocks();
.fi
.if n \{\
.RE
.\}
.SH "DESCRIPTION"
.sp
\fBrtapi_get_time\fR returns the current time in nanoseconds\&. Depending on the RTOS, this may be time since boot, or time since the clock period was set, or some other time\&. Its absolute value means nothing, but it is monotonically increasing and can be used to schedule future events, or to time the duration of some activity\&. Returns a 64 bit value\&. The resolution of the returned value may be as good as one nano\-second, or as poor as several microseconds\&. May be called from init/cleanup code, and from within realtime tasks\&.
.sp
\fBrtapi_get_clocks\fR returns the current time in CPU clocks\&. It is fast, since it just reads the TSC in the CPU instead of calling a kernel or RTOS function\&. Of course, times measured in CPU clocks are not as convenient, but for relative measurements this works fine\&. Its absolute value means nothing, but it is monotonically increasing and can be used to schedule future events, or to time the duration of some activity\&. (On SMP machines, the two TSC\(cqs may get out of sync, so if a task reads the TSC, gets swapped to the other CPU, and reads again, the value may decrease\&. RTAPI tries to force all RT tasks to run on one CPU\&.) Returns a 64 bit value\&. The resolution of the returned value is one CPU clock, which is usually a few nanoseconds to a fraction of a nanosecond\&. Note that \fIlong long\fR math may be poorly supported on some platforms, especially in kernel space\&. Also note that rtapi_print() will NOT print \fIlong long\fRs\&. Most time measurements are relative, and should be done like this:
.sp
.if n \{\
.RS 4
.\}
.nf
deltat = (long int)(end_time \- start_time);
.fi
.if n \{\
.RE
.\}
.sp
where end_time and start_time are longlong values returned from rtapi_get_time, and deltat is an ordinary long int (32 bits)\&. This will work for times up to a second or so, depending on the CPU clock frequency\&. It is best used for millisecond and microsecond scale measurements though\&.
.SH "RETURN VALUE"
.sp
Returns the current time in nanoseconds or CPU clocks\&.
.SH "NOTES"
.sp
Certain versions of the Linux kernel provide a global variable \fBcpu_khz\fR\&. Computing
.sp
.if n \{\
.RS 4
.\}
.nf
deltat = (end_clocks \- start_clocks) / cpu_khz:
.fi
.if n \{\
.RE
.\}
.sp
gives the duration measured in milliseconds\&. Computing
.sp
.if n \{\
.RS 4
.\}
.nf
deltat = (end_clocks \- start_clocks) * 1000000 / cpu_khz:
.fi
.if n \{\
.RE
.\}
.sp
gives the duration measured in nanoseconds for deltas less than about 9 trillion clocks (e\&.g\&., 3000 seconds at 3 GHz)\&.
.SH "REALTIME CONSIDERATIONS"
.sp
May be called from init/cleanup code and from within realtime tasks\&. Not available in non\-realtime components\&.
