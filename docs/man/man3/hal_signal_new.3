'\" t
.\"     Title: hal_signal_new
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 05/27/2025
.\"    Manual: LinuxCNC Documentation
.\"    Source: LinuxCNC
.\"  Language: English
.\"
.TH "HAL_SIGNAL_NEW" "3" "05/27/2025" "LinuxCNC" "LinuxCNC Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
hal_signal_new, hal_signal_delete, hal_link, hal_unlink \- Manipulate HAL signals
.SH "SYNTAX"
.sp
int hal_signal_new(const char* \fIsignal_name\fR, hal_type_t \fItype\fR)
.sp
int hal_signal_delete(const char* \fIsignal_name\fR)
.sp
int hal_link(const char* \fIpin_name\fR, const char* \fIsignal_name\fR)
.sp
int hal_unlink(const char* \fIpin_name\fR)
.SH "ARGUMENTS"
.PP
signal_name
.RS 4
The name of the signal\&.
.RE
.PP
pin_name
.RS 4
The name of the pin\&.
.RE
.PP
type
.RS 4
The type of the signal, as specified in
\fBhal_type_t(3hal)\fR\&.
.RE
.SH "DESCRIPTION"
.sp
\fBhal_signal_new\fR creates a new signal object\&. Once a signal has been created, pins can be linked to it with \fBhal_link\fR\&. The signal object contains the actual storage for the signal data\&. Pin objects linked to the signal have pointers that point to the data\&. \fIname\fR is the name of the new signal\&. It may be no longer than HAL_NAME_LEN characters\&. If there is already a signal with the same name the call will fail\&.
.sp
\fBhal_link\fR links a pin to a signal\&. If the pin is already linked to the desired signal, the command succeeds\&. If the pin is already linked to some other signal, it is an error\&. In either case, the existing connection is not modified\&. (Use \fIhal_unlink\fR to break an existing connection\&.) If the signal already has other pins linked to it, they are unaffected \- one signal can be linked to many pins, but a pin can be linked to only one signal\&.
.sp
\fBhal_unlink\fR unlinks any signal from the specified pin\&.
.sp
\fBhal_signal_delete\fR deletes a signal object\&. Any pins linked to the object are unlinked\&.
.SH "RETURN VALUE"
.sp
Returns a HAL status code\&.
.SH "SEE ALSO"
.sp
hal_type_t(3hal)
