'\" t
.\"     Title: mux_generic
.\"    Author: [see the "AUTHOR" section]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 05/27/2025
.\"    Manual: LinuxCNC Documentation
.\"    Source: LinuxCNC
.\"  Language: English
.\"
.TH "MUX_GENERIC" "9" "05/27/2025" "LinuxCNC" "LinuxCNC Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
mux_generic \- choose one from several input values
.SH "SYNOPSIS"
.sp
\fBloadrt mux_generic config="\fRbb8,fu12\&...\&.\fB"\fR
.SH "FUNCTIONS"
.sp
\fBmux\-gen\&.\fR\fINN\fR Depending on the data types can run in either a floating point or non\-floating point thread\&.
.SH "PINS"
.PP
\fBmux\-gen\&.\fR\fINN\fR\fB\&.suppress\-no\-input\fR bit in
.RS 4
This suppresses changing the output if all select lines are false\&. This stops unwanted jumps in output between transitions of input but makes in00 unavailable\&.
.RE
.PP
\fBmux\-gen\&.\fR\fINN\fR*\fB\&.debounce\-us\fR unsigned in
.RS 4
sets debounce time in microseconds, e\&.g\&. 100000 = a tenth of a second\&. The selection inputs must be stable this long before the output changes\&. This helps to ignore
\fInoisy\fR
switches\&.
.RE
.PP
\fBmux\-gen\&.\fR\fINN\fR**\&.sel\-bit\-*\fIMM\fR bit in (M=0\&.\&.N), \fBmux\-gen\&.\fR\fINN\fR*\fB\&.sel\-int\fR unsigned in
.RS 4
Together, these determine which
\fBin\fR\fIN\fR
value is copied to
\fBoutput\fR\&. The bit pins are interpreted as binary bits, and the result is simply added on to the integer pin input\&. It is expected that either one or the other would normally be used\&. However, the possibility exists to use a higher\-order bit to "shift" the values set by the integer pin\&. The sel\-bit pins are only created when the size of the mux_gen component is an integer power of two\&. This component (unlike mux16) does not offer the option of decoding Gray\-code, however the same effect can be achieved by arranging the order of the input values to suit\&.
.RE
.PP
\fBmux\-gen\&.\fR\fINN\fR\fB\&.out\-\fR[\fBbit\fR/\fBfloat\fR/\fBs32\fR/\fBu32\fR] variable\-type out
.RS 4
Follows the value of one of the *in*\fIN\fR
values according to the selection bits and/or the selection number\&. Values will be converted/truncated according to standard C rules\&. This means, for example that a float input greater than 2147483647 will give an S32 output of \-2147483648\&.
.RE
.PP
\fBmux\-gen\&.\fR\fINN\fR\fB\&.in\-\fR[\fBbit\fR/\fBfloat\fR/\fBs32\fR/\fBu32\fR]\fB\-\fR\fIMM\fR variable\-type in
.RS 4
The possible output values that are selected by the selection pins\&.
.RE
.SH "PARAMETERS"
.PP
\fBmux\-gen\&.\fR\fIN\fR\fB\&.elapsed\fR float r
.RS 4
Current value of the internal debounce timer for debugging\&.
.RE
.PP
\fBmux\-gen\&.\fR\fIN\fR\fB\&.selected\fR s32 r
.RS 4
Current value of the internal selection variable after conversion for debugging\&. Possibly useful for setting up gray\-code switches\&.
.RE
.SH "DESCRIPTION"
.sp
This component is a more general version of the other multiplexing components\&. It allows the creation of arbitrary\-size multiplexers (up to 1024 entries) and also supports differing data types on the input and output pins\&. The configuration string is a comma\-separated list of code\-letters and numbers, such as "bb4,fu12"\&. This would create a 4\-element bit\-to\-bit mux and a 12\-element float\-to\-unsigned mux\&. The code letters are b = bit, f = float, s = signed integer, u = unsigned integer\&. The first letter code is the input type, the second is the output type\&. The codes are not case\-sensitive\&. The order of the letters is significant but the position in the string is not\&. Do not insert any spaces in the config string\&. Any non\-zero float value will be converted to a "true" output in bit form\&. Be wary that float datatypes can be very, very, close to zero and not actually be equal to zero\&.
.sp
Each mux has its own HAL function and must be added to a thread separately\&. If neither input nor output is of type float then the function is base\-thread (non floating\-point) safe\&. Any mux_generic with a floating point input or output can only be added to a floating\-point thread\&.
.SH "SEE ALSO"
.sp
mux2(9), mux4(9), mux8(9), mux16(9)
.SH "AUTHOR"
.sp
Andy Pugh
.SH "LICENSE"
.sp
GPL
