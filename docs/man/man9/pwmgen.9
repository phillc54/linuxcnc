'\" t
.\"     Title: pwmgen
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets vsnapshot <http://docbook.sf.net/>
.\"      Date: 05/27/2025
.\"    Manual: LinuxCNC Documentation
.\"    Source: LinuxCNC
.\"  Language: English
.\"
.TH "PWMGEN" "9" "05/27/2025" "LinuxCNC" "LinuxCNC Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
pwmgen \- software PWM/PDM generation
.SH "SYNOPSIS"
.sp
\fBloadrt pwmgen output_type=\fR\fItype0\fR[,\fItype1\fR\&...]
.SH "DESCRIPTION"
.sp
\fBpwmgen\fR is used to generate PWM (pulse width modulation) or PDM (pulse density modulation) signals\&. The maximum PWM frequency and the resolution is quite limited compared to hardware\-based approaches, but in many cases software PWM can be very useful\&. If better performance is needed, a hardware PWM generator is a better choice\&.
.sp
\fBpwmgen\fR supports a maximum of eight channels\&. The number of channels actually loaded depends on the number of \fItype\fR values given\&. The value of each \fItype\fR determines the outputs for that channel\&.
.PP
type 0: single output
.RS 4
A single output pin,
\fBpwm\fR, whose duty cycle is determined by the input value for positive inputs, and which is off (or at
\fBmin\-dc\fR) for negative inputs\&. Suitable for single ended circuits\&.
.RE
.PP
type 1: pwm/direction
.RS 4
Two output pins,
\fBpwm\fR
and
\fBdir\fR\&. The duty cycle on
\fBpwm\fR
varies as a function of the input value\&.
\fBdir\fR
is low for positive inputs and high for negative inputs\&.
.RE
.PP
type 2: up/down
.RS 4
Two output pins,
\fBup\fR
and
\fBdown\fR\&. For positive inputs, the PWM/PDM waveform appears on
\fBup\fR, while
\fBdown\fR
is low\&. For negative inputs, the waveform appears on
\fBdown\fR, while
\fBup\fR
is low\&. Suitable for driving the two sides of an H\-bridge to generate a bipolar output\&.
.RE
.SH "FUNCTIONS"
.PP
\fBpwmgen\&.make\-pulses\fR (no floating\-point)
.RS 4
Generates the actual PWM waveforms, using information computed by
\fBupdate\fR\&. Must be called as frequently as possible, to maximize the attainable PWM frequency and resolution, and minimize jitter\&. Operates on all channels at once\&.
.RE
.PP
\fBpwmgen\&.update\fR (uses floating point)
.RS 4
Accepts an input value, performs scaling and limit checks, and converts it into a form usable by
\fBmake\-pulses\fR
for PWM/PDM generation\&. Can (and should) be called less frequently than
\fBmake\-pulses\fR\&. Operates on all channels at once\&.
.RE
.SH "PINS"
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.enable\fR bit in
.RS 4
Enables PWM generator
\fIN\fR
\- when false, all
\fBpwmgen\&.\fR\fIN\fR
output pins are low\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.value\fR float in
.RS 4
Commanded value\&. When
\fBvalue\fR
= 0\&.0, duty cycle is 0%, and when
\fBvalue\fR
= \(+-\fBscale\fR, duty cycle is \(+- 100% (subject to
\fBmin\-dc\fR
and
\fBmax\-dc\fR
limitations)\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR*\fB\&.pwm\fR bit out (output types 0 and 1 only)
.RS 4
PWM/PDM waveform\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.dir\fR bit out (output type 1 only)
.RS 4
Direction output: low for forward, high for reverse\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.up\fR bit out (output type 2 only)
.RS 4
PWM/PDM waveform for positive input values, low for negative inputs\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.down\fR bit out (output type 2 only)
.RS 4
PWM/PDM waveform for negative input values, low for positive inputs\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.curr\-dc\fR float out
.RS 4
The current duty cycle, after all scaling and limits have been applied\&. Range is from \-1\&.0 to +1\&.0\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.max\-dc\fR float in/out
.RS 4
The maximum duty cycle\&. A value of 1\&.0 corresponds to 100%\&. This can be useful when using transistor drivers with bootstrapped power supplies, since the supply requires some low time to recharge\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.min\-dc\fR float in/out
.RS 4
The minimum duty cycle\&. A value of 1\&.0 corresponds to 100%\&. Note that when the pwm generator is disabled, the outputs are constantly low, regardless of the setting of
\fBmin\-dc\fR\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.scale\fR float in/out, \fBpwmgen\&.\fR\fIN\fR\fB\&.offset\fR float in/out
.RS 4
These parameters provide a scale and offset from the
\fBvalue\fR
pin to the actual duty cycle\&. The duty cycle is calculated according to
\fIdc = (value/scale) + offset\fR, with 1\&.0 meaning 100%\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.pwm\-freq\fR float in/out
.RS 4
PWM frequency in Hz\&. The upper limit is half of the frequency at which
\fBmake\-pulses\fR
is invoked, and values above that limit will be changed to the limit\&. If
\fBdither\-pwm\fR
is false, the value will be changed to the nearest integer submultiple of the
\fBmake\-pulses\fR
frequency\&. A value of zero produces Pulse Density Modulation instead of Pulse Width Modulation\&.
.RE
.PP
\fBpwmgen\&.\fR\fIN\fR\fB\&.dither\-pwm\fR bit in/out
.RS 4
Because software\-generated PWM uses a fairly slow timebase (several to many microseconds), it has limited resolution\&. For example, if
\fBmake\-pulses\fR
is called at a 20 kHz rate, and
\fBpwm\-freq\fR
is 2 kHz, there are only 10 possible duty cycles\&. If
\fBdither\-pwm\fR
is false, the commanded duty cycle will be rounded to the nearest of those values\&. Assuming
\fBvalue\fR
remains constant, the same output will repeat every PWM cycle\&. If
\fBdither\-pwm\fR
is true, the output duty cycle will be dithered between the two closest values, so that the long\-term average is closer to the desired level\&.
\fBdither\-pwm\fR
has no effect if
\fBpwm\-freq\fR
is zero (PDM mode), since PDM is an inherently dithered process\&.
.RE
